package com.shopnest.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.shopnest.config.JwtTokenProvider;
import com.shopnest.exception.UserException;
import com.shopnest.model.User;
import com.shopnest.repository.UserRepository;
import com.shopnest.response.AuthResponse;

@RestController
@RequestMapping("/auth")
public class AuthController {
	
	private UserRepository userRepository;
	private JwtTokenProvider jwtTokenProvider;
	private PasswordEncoder passwordEncoder;
	
	public AuthController(UserRepository userRepository) {
		this.userRepository=userRepository;
		// TODO Auto-generated constructor stub
	}

	public ResponseEntity<AuthResponse>createUserHandler(@RequestBody User user) throws UserException
	{
		String email= user.getEmail();
		String password = user.getPassword();
		String firstName = user.getFirstName();
		String lastName = user.getLastName();
		
		User isEmailExist= userRepository.findByEmail(email);
		
		if(isEmailExist!=null)
		{
			throw new UserException("Email is already used with Another Account");
		}
		
		User createdUser =new User();
		
		createdUser.setEmail(email);
		createdUser.setPassword(passwordEncoder.encode(password));
		createdUser.setFirstName(firstName);
		createdUser.setLastName(lastName);
		
		User savedUser= userRepository.save(createdUser);
		
		
		Authentication authentication= new UsernamePasswordAuthenticationToken(savedUser.getEmail(), savedUser.getPassword());
		SecurityContextHolder.getContext().setAuthentication(authentication);
		
		String token= jwtTokenProvider.generateToken(authentication);
		
		AuthResponse authResponse= new AuthResponse(token,"Sign Up Success");
		
		return new ResponseEntity<AuthResponse>(authResponse,HttpStatus.CREATED);
		
	}
}
